{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/admins/": {
            "get": {
                "tags": [
                    "admins"
                ],
                "description": "get Admins",
                "operationId": "AdminsController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Admins"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "admins"
                ],
                "description": "create Admins",
                "operationId": "AdminsController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Admins content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Admins"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Admins"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/admins/{id}": {
            "get": {
                "tags": [
                    "admins"
                ],
                "description": "get Admins by id",
                "operationId": "AdminsController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Admins"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "admins"
                ],
                "description": "update the Admins",
                "operationId": "AdminsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Admins content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Admins"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Admins"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "admins"
                ],
                "description": "delete the Admins",
                "operationId": "AdminsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/answers/": {
            "get": {
                "tags": [
                    "answers"
                ],
                "description": "get Answers",
                "operationId": "AnswersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Answers"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "answers"
                ],
                "description": "create Answers",
                "operationId": "AnswersController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Answers content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Answers"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Answers"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/answers/{id}": {
            "get": {
                "tags": [
                    "answers"
                ],
                "description": "get Answers by id",
                "operationId": "AnswersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Answers"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "answers"
                ],
                "description": "update the Answers",
                "operationId": "AnswersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Answers content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Answers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Answers"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "answers"
                ],
                "description": "delete the Answers",
                "operationId": "AnswersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/images/": {
            "get": {
                "tags": [
                    "images"
                ],
                "description": "get Images",
                "operationId": "ImagesController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Images"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "images"
                ],
                "description": "create Images",
                "operationId": "ImagesController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Images content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Images"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Images"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/images/{id}": {
            "get": {
                "tags": [
                    "images"
                ],
                "description": "get Images by id",
                "operationId": "ImagesController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Images"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "images"
                ],
                "description": "update the Images",
                "operationId": "ImagesController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Images content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Images"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Images"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "images"
                ],
                "description": "delete the Images",
                "operationId": "ImagesController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/lessons/": {
            "get": {
                "tags": [
                    "lessons"
                ],
                "description": "get Lessons",
                "operationId": "LessonsController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Lessons"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "lessons"
                ],
                "description": "create Lessons",
                "operationId": "LessonsController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Lessons content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Lessons"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Lessons"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/lessons/{id}": {
            "get": {
                "tags": [
                    "lessons"
                ],
                "description": "get Lessons by id",
                "operationId": "LessonsController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Lessons"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "lessons"
                ],
                "description": "update the Lessons",
                "operationId": "LessonsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Lessons content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Lessons"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Lessons"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lessons"
                ],
                "description": "delete the Lessons",
                "operationId": "LessonsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/options/": {
            "get": {
                "tags": [
                    "options"
                ],
                "description": "get Options",
                "operationId": "OptionsController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Options"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "options"
                ],
                "description": "create Options",
                "operationId": "OptionsController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Options content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Options"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Options"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/options/{id}": {
            "get": {
                "tags": [
                    "options"
                ],
                "description": "get Options by id",
                "operationId": "OptionsController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Options"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "options"
                ],
                "description": "update the Options",
                "operationId": "OptionsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Options content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Options"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Options"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "options"
                ],
                "description": "delete the Options",
                "operationId": "OptionsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/screens/": {
            "get": {
                "tags": [
                    "screens"
                ],
                "description": "get Screens",
                "operationId": "ScreensController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Screens"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "screens"
                ],
                "description": "create Screens",
                "operationId": "ScreensController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Screens content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Screens"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Screens"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/screens/{id}": {
            "get": {
                "tags": [
                    "screens"
                ],
                "description": "get Screens by id",
                "operationId": "ScreensController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Screens"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "screens"
                ],
                "description": "update the Screens",
                "operationId": "ScreensController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Screens content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Screens"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Screens"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "screens"
                ],
                "description": "delete the Screens",
                "operationId": "ScreensController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users",
                "operationId": "UsersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Users"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "description": "create Users",
                "operationId": "UsersController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Users content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Users"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users by id",
                "operationId": "UsersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Users"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "description": "update the Users",
                "operationId": "UsersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Users content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Users"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.Users"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "description": "delete the Users",
                "operationId": "UsersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/users_score/": {
            "get": {
                "tags": [
                    "users_score"
                ],
                "description": "get UserScore",
                "operationId": "UserScoreController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.UserScore"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "users_score"
                ],
                "description": "create UserScore",
                "operationId": "UserScoreController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserScore content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.UserScore"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.UserScore"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/users_score/{id}": {
            "get": {
                "tags": [
                    "users_score"
                ],
                "description": "get UserScore by id",
                "operationId": "UserScoreController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.UserScore"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "users_score"
                ],
                "description": "update the UserScore",
                "operationId": "UserScoreController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserScore content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.UserScore"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/.UserScore"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users_score"
                ],
                "description": "delete the UserScore",
                "operationId": "UserScoreController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        ".Admins": {
            "type": "object"
        },
        ".Answers": {
            "type": "object"
        },
        ".Images": {
            "type": "object"
        },
        ".Lessons": {
            "type": "object"
        },
        ".Options": {
            "type": "object"
        },
        ".Screens": {
            "type": "object"
        },
        ".UserScore": {
            "type": "object"
        },
        ".Users": {
            "type": "object"
        }
    },
    "tags": [
        {
            "name": "admins",
            "description": "AdminsController operations for Admins\n"
        },
        {
            "name": "answers",
            "description": "AnswersController operations for Answers\n"
        },
        {
            "name": "images",
            "description": "ImagesController operations for Images\n"
        },
        {
            "name": "lessons",
            "description": "LessonsController operations for Lessons\n"
        },
        {
            "name": "options",
            "description": "OptionsController operations for Options\n"
        },
        {
            "name": "screens",
            "description": "ScreensController operations for Screens\n"
        },
        {
            "name": "users_score",
            "description": "UserScoreController operations for UserScore\n"
        },
        {
            "name": "users",
            "description": "UsersController operations for Users\n"
        }
    ]
}